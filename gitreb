# Small interface over git rebase -i
# Allows non-interactive rebasing
# with action applied only to specified revision

if test ${#*} -ne 2
then
	echo "Usage: `basename $0` <ACTION> <REVISION>"
	echo "Example:"
	echo "    `basename $0` drop HEAD~2"
	echo "    `basename $0` edit :/some\\ nasty\\ bug"
	exit 1
fi

git status &> /dev/null
if test $? -ne 0
then
	echo "Not in working git repo"
	exit 1
fi

git status | grep '^interactive rebase in progress' &> /dev/null
if test $? -eq 0
then
	echo "Currently rebasing"
	exit 1
fi

# Get first argument -> rebase action
ACTION="$1"

# Get following argument -> revision parameters
COMMIT=`git rev-parse --short "$2" 2> /dev/null` || exit $?
if test -z $COMMIT
then
	echo "Invalid revision \"$*\""
	exit 1
fi

export GIT_SEQUENCE_EDITOR="sed -i 's/^pick/$ACTION/;q'"

case "$ACTION" in

  d|drop|delete )

	export GIT_SEQUENCE_EDITOR="sed -i 'd;q'"
	;&

  p|pick   | r|reword | e|edit | \
  s|squash | f|fixup  | x|exec )

	# Check whether revision is initial commit
	FIRSTCOMMITLONG=`git rev-list --max-parents=0 HEAD` || exit $?
	FIRSTCOMMIT=`git rev-parse --short $FIRSTCOMMITLONG` || exit $?

	if test $COMMIT != $FIRSTCOMMIT
	then
		if ! `git merge-base --is-ancestor $COMMIT^ HEAD`
		then
			echo "$COMMIT is in another branch"
			exit 1
		fi
		git rebase --preserve-merges -i $COMMIT^
	else
		if ! `git merge-base --is-ancestor $COMMIT HEAD`
		then
			echo "$COMMIT is in another branch (HEAD is orphaned from root)"
			exit 1
		fi
		git rebase --preserve-merges --root
	fi
	;;

  *)

	echo "Invalid action \"$ACTION\""
	exit 1

esac
